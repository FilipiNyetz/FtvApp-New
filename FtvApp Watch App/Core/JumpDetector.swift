//
//  JumpDetector.swift
//  FtvApp Watch App
//
//  Sistema simples de detec√ß√£o de saltos para futev√¥lei
// 

#if os(watchOS)

import Foundation
import CoreMotion

// MARK: - Jump Detector Simples

/// Detector de saltos simples para futev√¥lei
final class JumpDetector: ObservableObject {
    
    // MARK: - üéØ VARI√ÅVEIS PRINCIPAIS DOS SALTOS
    
    ///  Altura do √∫ltimo salto (em metros)
    @Published var lastJumpHeight: Double = 0.0
    
    ///  ALTURA DO SALTO MAIS ALTO (em metros)  VARI√ÅVEL PRINCIPAL
    @Published var bestJumpHeight: Double = 0.0
    
    // MARK: - Componentes do Sistema
    
    private let motionManager = CMMotionManager()
    private let operationQueue = OperationQueue()
    
    // MARK: - Vari√°veis do Algoritmo
    
    private var isInFlight = false
    private var takeoffTime: TimeInterval?
    private var landingTime: TimeInterval?
    private var freefallCount = 0
    private var groundCount = 0
    private var stableCount = 0
    
    // Filtro de suaviza√ß√£o
    private var previousAccel: Double = 1.0
    private var accelHistory: [Double] = []
    private let historySize = 5
    
    // Contador para logs
    private var logCounter = 0
    
    // MARK: - ""N√ÉO MEXER"" CONFIGURA√á√ïES OTIMIZADAS PARA MOVIMENTOS R√ÅPIDOS DO FUTEV√îLEI
    
    private let freefallThreshold: Double = 0.5     // Mais sens√≠vel para movimentos r√°pidos
    private let groundThreshold: Double = 1.3       // Menos rigoroso para pousos r√°pidos
    private let minFreefallSamples = 2              // Detec√ß√£o mais r√°pida
    private let minGroundSamples = 2                // Pouso mais r√°pido
    private let minFlightTime: Double = 0.06        // Tempo m√≠nimo mais baixo (60ms)
    
    // MARK: - M√©todos P√∫blicos
    
    /// Inicia a detec√ß√£o de saltos
    func start() {
        guard motionManager.isDeviceMotionAvailable else {
            print("‚ö†Ô∏è Sensor de movimento n√£o dispon√≠vel")
            return
        }
        
        //  CONFIGURA√á√ÉO ULTRA RESPONSIVA PARA MOVIMENTOS R√ÅPIDOS
        motionManager.deviceMotionUpdateInterval = 1.0 / 100.0  // 100Hz para capturar movimentos muito r√°pidos
        
        // Configura fila de opera√ß√µes para processamento eficiente
        operationQueue.maxConcurrentOperationCount = 1
        operationQueue.qualityOfService = .userInitiated
        
        motionManager.startDeviceMotionUpdates(
            using: .xArbitraryZVertical,  // Refer√™ncia vertical est√°vel
            to: operationQueue
        ) { [weak self] deviceMotion, error in
            guard let self = self, let motion = deviceMotion else {
                if let error = error {
                    print("‚ö†Ô∏è Erro no sensor: \(error.localizedDescription)")
                }
                return
            }
            self.processMotion(motion)
        }
        
//        print("üöÄ Detector de saltos iniciado")
    }
    
    /// Para a detec√ß√£o
    func stop() {
        motionManager.stopDeviceMotionUpdates()
        print("‚èπÔ∏è Detector de saltos parado")
    }
    
    // MARK: - ALGORITMO PRINCIPAL DE C√ÅLCULO DO SALTO
    
    /// Processa os dados do sensor de movimento com filtro inteligente
    private func processMotion(_ deviceMotion: CMDeviceMotion) {
        // Aplica filtro suave para reduzir ru√≠do mantendo responsividade
        let rawAcceleration = extractVerticalAcceleration(from: deviceMotion)
        let acceleration = applySmoothingFilter(rawAcceleration)
        let timestamp = deviceMotion.timestamp
        
        // Log peri√≥dico para debug (a cada 60 amostras = ~1s)
        logCounter += 1
        if logCounter % 60 == 0 {
//            print("üìä Acelera√ß√£o: \(String(format: "%.2f", acceleration))g | Em voo: \(isInFlight)")
        }
        
        if isInFlight {
            //  DURANTE O VOO - Detecta pouso
            if acceleration > groundThreshold {
                groundCount += 1
                if groundCount >= minGroundSamples {
                    landingTime = timestamp
                    
                    //  VALIDA√á√ÉO: Verifica se o tempo de voo √© v√°lido
                    if let takeoff = takeoffTime {
                        let flightTime = timestamp - takeoff
                        if flightTime >= minFlightTime {
                            calculateJumpHeight()
                            print("üõ¨ Pouso detectado! (a=\(String(format: "%.2f", acceleration))g)")
                        } else {
                            print("‚ö†Ô∏è Movimento muito r√°pido, n√£o √© salto (t=\(String(format: "%.3f", flightTime))s)")
                        }
                    }
                    resetFlight()
                }
            } else {
                groundCount = 0
            }
            
        } else {
            //  NO CH√ÉO - Detecta in√≠cio do salto
            
            // Detecta queda livre (in√≠cio do salto)
            if acceleration < freefallThreshold {
                freefallCount += 1
                if freefallCount >= minFreefallSamples {
                    takeoffTime = timestamp
                    isInFlight = true
                    freefallCount = 0
//                    print("üõ´ SALTO DETECTADO! (a=\(String(format: "%.2f", acceleration))g)")
                }
            } else {
                freefallCount = 0
            }
            
            // Log apenas quando confirma o salto (reduz spam no console)
        }
    }
    
    /// Extrai acelera√ß√£o vertical do movimento do dispositivo
    private func extractVerticalAcceleration(from deviceMotion: CMDeviceMotion) -> Double {
        let gravity = deviceMotion.gravity
        let totalAccel = (
            x: deviceMotion.userAcceleration.x + gravity.x,
            y: deviceMotion.userAcceleration.y + gravity.y,
            z: deviceMotion.userAcceleration.z + gravity.z
        )
        
        // Calcula magnitude da acelera√ß√£o total
        let magnitude = sqrt(totalAccel.x * totalAccel.x + 
                           totalAccel.y * totalAccel.y + 
                           totalAccel.z * totalAccel.z)
        return magnitude
    }
    
    ///  Aplica filtro otimizado para movimentos r√°pidos do futev√¥lei
    private func applySmoothingFilter(_ rawAcceleration: Double) -> Double {
        // Janela ainda menor para m√°xima responsividade em movimentos r√°pidos
        accelHistory.append(rawAcceleration)
        if accelHistory.count > 2 {  // Apenas 2 amostras para ultra responsividade
            accelHistory.removeFirst()
        }
        
        // Filtro ponderado com ainda mais peso no valor atual
        let weights = [0.7, 0.3]  // 70% no valor mais recente
        var weightedSum = 0.0
        var totalWeight = 0.0
        
        for (index, value) in accelHistory.enumerated() {
            let weight = weights[min(index, weights.count - 1)]
            weightedSum += value * weight
            totalWeight += weight
        }
        
        let average = weightedSum / totalWeight
        
        // Filtro exponencial mais responsivo para movimentos r√°pidos
        let alpha: Double = 0.6  // Muito responsivo para futev√¥lei
        let smoothed = alpha * average + (1 - alpha) * previousAccel
        previousAccel = smoothed
        
        return smoothed
    }
    
    ///  CALCULA A ALTURA DO SALTO - ALGORITMO CALIBRADO E PRECISO
    private func calculateJumpHeight() {
        guard let start = takeoffTime, let end = landingTime else { return }
        
        // Tempo de voo total
        let flightTime = end - start
        
        //  VALIDA√á√ÉO DO TEMPO DE VOO (menos rigorosa para movimentos r√°pidos)
        guard flightTime >= minFlightTime && flightTime < 1.5 else { 
//            print("‚ö†Ô∏è Tempo de voo inv√°lido: \(String(format: "%.3f", flightTime))s")
            return
        }
        
        //  F√ìRMULA F√çSICA APRIMORADA: h = g √ó t¬≤ / 8
        let gravity: Double = 9.81
        var height = gravity * flightTime * flightTime / 8.0
        
        // üîß CALIBRA√á√ÉO MELHORADA PARA FUTEV√îLEI
        // Compensa√ß√£o para delay de sensores (~30ms t√≠pico em movimentos r√°pidos)
        let sensorDelay = 0.03  // 30ms
        let adjustedTime = flightTime + sensorDelay
        height = gravity * adjustedTime * adjustedTime / 8.0
        
        // Fator de calibra√ß√£o mais pr√≥ximo da realidade
        let calibrationFactor = 1.15  // Aumentado para compensar subestima√ß√£o
        height *= calibrationFactor
        
        //  VALIDA√á√ÉO FINAL DA ALTURA (mais permissiva)
        guard height > 0.01 && height < 3.0 else { 
            print("‚ö†Ô∏è Altura calculada fora do range: \(String(format: "%.0f", height * 100))cm")
            return
        }
        
        //  ATUALIZA AS VARI√ÅVEIS PRINCIPAIS
        DispatchQueue.main.async { [weak self] in
            self?.lastJumpHeight = height
            
            //  ATUALIZA O SALTO MAIS ALTO 
            if height > (self?.bestJumpHeight ?? 0) {
                self?.bestJumpHeight = height
//                print("üèÜ Novo recorde: \(String(format: "%.0f", height * 100))cm")
            }
            
//            print("‚úÖ Salto v√°lido: \(String(format: "%.0f", height * 100))cm (t=\(String(format: "%.3f", flightTime))s)")
        }
    }
    
    /// Reseta o estado do voo
    private func resetFlight() {
        isInFlight = false
        takeoffTime = nil
        landingTime = nil
        groundCount = 0
        freefallCount = 0
        stableCount = 0
    }
}

#else

// MARK: - Stub para outras plataformas

final class JumpDetector: ObservableObject {
    @Published var lastJumpHeight: Double = 0
    @Published var bestJumpHeight: Double = 0
    
    func start() {
        print("‚ö†Ô∏è JumpDetector s√≥ funciona no watchOS")
    }
    
    func stop() { }
}

#endif
